#include <iostream>
#include <vector>
#include <omp.h>
#include <cstdlib>   // rand(), srand()
#include <ctime>     // time()

#define N 1024      // Size of matrices: NxN; size of vectors: N*N

// Function to perform vector addition: c = a + b
void vectorAdd(const std::vector<float>& a, const std::vector<float>& b, std::vector<float>& c) {
    #pragma omp parallel for
    for (int i = 0; i < static_cast<int>(a.size()); ++i) {
        c[i] = a[i] + b[i];
    }
}

// Function to perform matrix multiplication: C = A * B
void matrixMultiply(const std::vector<float>& A, const std::vector<float>& B, std::vector<float>& C, int n) {
    #pragma omp parallel for collapse(2)
    for (int row = 0; row < n; ++row) {
        for (int col = 0; col < n; ++col) {
            float sum = 0.0f;
            for (int k = 0; k < n; ++k) {
                sum += A[row * n + k] * B[k * n + col];
            }
            C[row * n + col] = sum;
        }
    }
}

int main() {
    int size = N * N;

    // Initialize vectors and matrices with random values
    std::vector<float> vecA(size), vecB(size), vecC(size);
    std::vector<float> matA(size), matB(size), matC(size);

    // Seed random generator
    srand(static_cast<unsigned int>(time(0)));

    #pragma omp parallel for
    for (int i = 0; i < size; ++i) {
        vecA[i] = static_cast<float>(rand() % 100) / 10.0f;
        vecB[i] = static_cast<float>(rand() % 100) / 10.0f;
        matA[i] = static_cast<float>(rand() % 100) / 10.0f;
        matB[i] = static_cast<float>(rand() % 100) / 10.0f;
    }

    // Perform vector addition
    double startVec = omp_get_wtime();
    vectorAdd(vecA, vecB, vecC, size);
    double endVec = omp_get_wtime();

    // Perform matrix multiplication
    double startMat = omp_get_wtime();
    matrixMultiply(matA, matB, matC, N);
    double endMat = omp_get_wtime();

    // Output part of the results
    std::cout << "Vector Addition - First 5 elements:\n";
    for (int i = 0; i < 5; ++i) {
        std::cout << vecC[i] << " ";
    }
    std::cout << "\nExecution time (vector add): " << endVec - startVec << " seconds\n\n";

    std::cout << "Matrix Multiplication - Top-left 3x3 corner:\n";
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            std::cout << matC[i * N + j] << " ";
        }
        std::cout << "\n";
    }
    std::cout << "Execution time (matrix multiply): " << endMat - startMat << " seconds\n";

    return 0;
}