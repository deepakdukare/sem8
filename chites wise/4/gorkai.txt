#include <iostream>
#include <vector>
#include <omp.h>
#include <chrono>

using namespace std;

// Function for vector addition
void vector_addition(const vector<double>& a, const vector<double>& b, vector<double>& result, int size) {
    #pragma omp parallel for
    for (int i = 0; i < size; i++) {
        result[i] = a[i] + b[i];
    }
}

// Function for matrix multiplication
void matrix_multiplication(const vector<vector<double>>& A, const vector<vector<double>>& B, 
                         vector<vector<double>>& C, int rows_a, int cols_a, int cols_b) {
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < rows_a; i++) {
        for (int j = 0; j < cols_b; j++) {
            double sum = 0.0;
            for (int k = 0; k < cols_a; k++) {
                sum += A[i][k] * B[k][j];
            }
            C[i][j] = sum;
        }
    }
}

int main() {
    // Set number of threads
    omp_set_num_threads(4);

    // Vector addition setup
    const int vector_size = 1000000;
    vector<double> vec_a(vector_size, 1.5);
    vector<double> vec_b(vector_size, 2.5);
    vector<double> vec_result(vector_size, 0.0);

    // Matrix multiplication setup
    const int rows_a = 200;
    const int cols_a = 300;
    const int cols_b = 200;
    
    vector<vector<double>> matrix_a(rows_a, vector<double>(cols_a, 1.0));
    vector<vector<double>> matrix_b(cols_a, vector<double>(cols_b, 2.0));
    vector<vector<double>> matrix_c(rows_a, vector<double>(cols_b, 0.0));

    // Measure vector addition time
    auto start = chrono::high_resolution_clock::now();
    vector_addition(vec_a, vec_b, vec_result, vector_size);
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> vec_duration = end - start;

    // Verify vector addition result
    bool vec_correct = true;
    for (int i = 0; i < vector_size; i++) {
        if (abs(vec_result[i] - 4.0) > 1e-10) {
            vec_correct = false;
            break;
        }
    }

    // Measure matrix multiplication time
    start = chrono::high_resolution_clock::now();
    matrix_multiplication(matrix_a, matrix_b, matrix_c, rows_a, cols_a, cols_b);
    end = chrono::high_resolution_clock::now();
    chrono::duration<double> mat_duration = end - start;

    // Verify matrix multiplication result
    bool mat_correct = true;
    for (int i = 0; i < rows_a; i++) {
        for (int j = 0; j < cols_b; j++) {
            if (abs(matrix_c[i][j] - (cols_a * 2.0)) > 1e-10) {
                mat_correct = false;
                break;
            }
        }
    }

    // Output results
    cout << "Vector Addition Time: " << vec_duration.count() << " seconds" << endl;
    cout << "Vector Addition Correct: " << (vec_correct ? "Yes" : "No") << endl;
    cout << "Matrix Multiplication Time: " << mat_duration.count() << " seconds" << endl;
    cout << "Matrix Multiplication Correct: " << (mat_correct ? "Yes" : "No") << endl;

    return 0;
}